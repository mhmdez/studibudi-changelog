[changelog]
# template for the changelog body
body = """
# StudiBudi Changelog

*Automatically generated from both [StudiBudi Backend](https://github.com/mhmdez/studibudi) and [StudiBudi AI Tutor](https://github.com/mhmdez/studi-budi-ai-tutor)*

---

{% for group, commits in commits | group_by(attribute="group") %}
## {{ group | striptags | trim }}

{% for commit in commits %}
- {{ commit.message | trim }}
{% endfor %}
{% endfor %}

---

*Last updated: {{ "now" | date(format="%Y-%m-%d") }}*
"""
trim = true

[git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_parsers = [
    # Only include user-facing features
    { message = "^feat.*[Aa]dd.*", group = "🚀 New Features" },
    { message = "^feat.*[Ii]ntroduce.*", group = "🚀 New Features" },
    { message = "^feat.*[Ll]aunch.*", group = "🚀 New Features" },
    { message = "^feat.*[Ee]nable.*", group = "🚀 New Features" },
    { message = "^feat.*[Ii]mplement.*", group = "🚀 New Features" },
    { message = "^feat.*", group = "🚀 New Features" },
    
    # User-facing improvements
    { message = "^fix.*[Ii]mprove.*", group = "✨ Improvements" },
    { message = "^fix.*[Ee]nhance.*", group = "✨ Improvements" },
    { message = "^fix.*[Bb]etter.*", group = "✨ Improvements" },
    { message = "^fix.*[Ff]aster.*", group = "✨ Improvements" },
    { message = "^fix.*[Oo]ptimize.*", group = "✨ Improvements" },
    { message = "^fix.*", group = "🐛 Bug Fixes" },
    
    # Performance that users will notice
    { message = "^perf.*", group = "⚡ Performance" },
    
    # Skip all technical/internal commits
    { message = "^chore.*", skip = true },
    { message = "^ci.*", skip = true },
    { message = "^build.*", skip = true },
    { message = "^docs.*", skip = true },
    { message = "^style.*", skip = true },
    { message = "^refactor.*", skip = true },
    { message = "^test.*", skip = true },
    { message = ".*package.*", skip = true },
    { message = ".*dependency.*", skip = true },
    { message = ".*dependencies.*", skip = true },
    { message = ".*config.*", skip = true },
    { message = ".*setup.*", skip = true },
    { message = ".*migration.*", skip = true },
    { message = ".*release.*", skip = true },
    { message = ".*version.*", skip = true },
    { message = ".*bump.*", skip = true },
    { message = ".*update.*workflow.*", skip = true },
    { message = ".*github.*", skip = true },
    { message = ".*action.*", skip = true },
    { message = ".*eslint.*", skip = true },
    { message = ".*prettier.*", skip = true },
    { message = ".*lint.*", skip = true },
    { message = ".*format.*", skip = true },
    { message = ".*gitignore.*", skip = true },
    { message = ".*README.*", skip = true },
    { message = ".*merge.*", skip = true },
    { message = ".*Merge.*", skip = true },
    { message = ".*PR.*", skip = true },
    { message = ".*pull request.*", skip = true },
    { message = ".*auto.*", skip = true },
    { message = ".*automated.*", skip = true },
    { message = ".*bot.*", skip = true },
]

protect_breaking_commits = false
filter_commits = true
tag_pattern = "v[0-9].*"
skip_tags = ""
ignore_tags = ""
topo_order = false
sort_commits = "newest"
limit_commits = 50  # Limit to recent 50 commits total
